# Web-Widget



## Definition

* Should not depends on data model.
* Should be able to be customized.

## Requirement

* A widget can have its own behavior.

    Widget\Behavior
    Widget\LoginBehavior
    $w->do('login');

* Should have a sendbox
    WidgetSandbox

* Output configs to document.ready in header....

* Accessibility

* Security & Permission 

* provide an application register interface.

* sandbox event notify to trigger other widgets to response.

* when modules are loosely coupled, removing a module doesnt' break the others.

* application core handles errors

* application core: 
   * be extensible.
   * manage module life cycle.
   * enable inter-module communication.

* ajax json/xml communication

* Y.io 

* should be able to test separately.

* sandbox.request

## Plan 

x Move form widget from Phifty\Widget to Form Widget.
x Design/Implement Phifty\Widget.
x Design/Implement Phifty\AssetLoader.
* Export widget web path to webroot.
    plugin export to

        webroot/ph/plugins
        webroot/ph/Core/css
        webroot/ph/Core/js
        
* Add Widget class loading rule to class loader.

* Implement js/css minifier.
* Add js/css loader in template.



## Use Case

Backend use case:

    namespace \Phifty\Widget;
    use Phifty\Widget;

    class Slider extends Widget 
    {
        function js();
        function css();
        function render();

        function minified_js();  // return minified js content.
        function minified_css();   // return minified css content.

        function template();

        function addImage($image, $attrs = array() );
    }

    AssetLoader::load( 'Galleria' );  # core/widgets/Galleria.php
    AssetLoader::loadFromPlugin( 'BannderSlider' , 'Galleria' );

    \Phifty\Web\AssetLoader::load( 'SliderWidget' );

    $w = new Slider;
    $w->addImage( 'image.png', array( .... ) );
    $w->addImage( 'image2.png', array( .... ) );
	$w->setTemplate( '<div> ... </div>' );
    $w->render();

Widget dir structure:

1. Separately 

    core/Widget/SliderWidget/web/slider.js
    core/Widget/SliderWidget/web/slider.css
    core/Widget/SliderWidget/template/template.html
    core/Widget/SliderWidget/lib/SliderWidget.php

2. in plugins:

    plugins/BannerSlider/lib/Widget/Slider.php
    plugins/BannerSlider/web/slider.js
    plugins/BannerSlider/web/slider.css

3. in widgets dir:

    widgets/Galleria/config.yml
    widgets/Galleria/Galleria.php
    widgets/Galleria/web/galleria.js
    widgets/Galleria/web/galleria.css
    widgets/Galleria/web/images/.....

    widgets for plugin

    plugins/BannerSlider/widgets/Galleria/Galleria.php
                         ....
Frontend use case (in Twig):

    {{ set widget = Web.new_widget('Slider') }}
    {{ widget.addImage('test.png') }}
    {{ widget.addImage('test.png') }}
    {{ widget.render() | raw }}

## Thoughts

use XML to load templates and configuration ?

    <widget>
        <html>

        </html>
    </widget>

IO Request

    gadgets.io.makeRequest(
        responseCallback
    );

## Reference

* XML
    * http://tw2.php.net/manual/en/book.dom.php

* Architecture
    * http://www.slideshare.net/nzakas/scalable-javascript-application-architecture
    * http://www.slideshare.net/hasanveldstra/the-anatomy-of-the-google-architecture-fina-lv11
    * http://www.slideshare.net/coolpics/flickr-44054
    * http://www.slideshare.net/PatrickKennedy/best-practice-information-architecture
    * http://ajaxpatterns.org/Microcontent
    * http://codeutopia.net/blog/2008/12/03/common-widget-design-patterns/

